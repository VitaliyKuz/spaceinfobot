import asyncio  # asyncio ‚Äî —Ü–µ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É async/await .

import datetime  # –ú–æ–¥—É–ª—å datetime –Ω–∞–¥–∞—î –∫–ª–∞—Å–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—É —Ç–∞ –¥–∞—Ç–∏ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏.

# –¶–µ–π –æ–±'—î–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
from aiogram.types import Message, InlineQuery, InlineQueryResultPhoto, \
     InlineQueryResultArticle, InputTextMessageContent


from bot.nasa_features.nasa_api import NasaApi


async def picture_of_the_specific_day(query: InlineQuery):
    """ –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–µ–≤–Ω–æ–≥–æ –¥–Ω—è –∑–∞ –π–æ–≥–æ –¥–∞—Ç–æ—é. """
    try:
        # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏
        date = datetime.date.fromisoformat(query.query)
        # –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞ —Å–∏–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
        title, url = await NasaApi().get_picture_of_the_day(query.query)
    except ValueError:
        result = []  # —è–∫—â–æ –¥–∞—Ç–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ç–æ –º–∏ —Ñ–æ—Ä–º—É—î–º–æ –ø—É—Å—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    else:
        # —Ñ–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é
        result = [
            InlineQueryResultPhoto(
                id="pic_of_the_day",
                title=f"Picture of the {date.strftime('%d`th %B %Y')}",
                description='For specific day`s picture enter date in format [YYYY-MM-DD]',
                photo_url=url,
                caption=title,
                thumb_url=url
            )
        ]
    # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –º–µ–Ω—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await query.answer(result,
                       cache_time=1,
                       is_personal=True)


async def get_message_for_forecast(for_week=False):
    """ –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –∞—Å—Ç–µ—Ä–æ—ó–¥—ñ–≤. """
    # –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –∞—Å—Ç–µ—Ä–æ—ó–¥–∏
    forecast = await NasaApi().get_space_forecast(for_week)
    message = ""
    print(forecast)
    for day in list(forecast.keys()):
        # —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –æ–∫—Ä–µ–º–∏–π –¥–µ–Ω—å
        for asteroid in forecast[day]:
            # —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –æ–∫—Ä–µ–º–∏–π –∞—Å—Ç–µ—Ä–æ—ó–¥
            if asteroid['is_potentially_hazardous_asteroid']:
                # —è–∫—â–æ –∞—Å—Ç–µ—Ä–æ—ó–¥ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π –π–æ–≥–æ –∑–∞–ø–∏—Å—É—î–º–æ

                # –≤–∏–∑–Ω–∞—á–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä –∞—Å—Ç–µ—Ä–æ—ó–¥–∞
                min_diameter = float(asteroid['estimated_diameter']['meters']
                                     ['estimated_diameter_min'])
                max_diameter = float(asteroid['estimated_diameter']['meters'][
                                         'estimated_diameter_max'])
                approach_data = asteroid['close_approach_data'][0]
                approach_time = (approach_data['close_approach_date_full'])
                approach_speed = (float(approach_data['relative_velocity']['kilometers_per_hour']))

                # —Ñ–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                name_message = f"üì∞ Object name: {asteroid['name']}"
                diameter_message = (
                    f"üìè Estimated diameter: min={min_diameter:.2f}m, "
                    f"max={max_diameter:.2f}m")
                close_approach_message = (f"üö® Speed: {approach_speed:.2f}km/h"
                                          f"\n ‚åõÔ∏èEstimated approach time: {approach_time}")

                message = (f"{message}\n{name_message}"
                           f"\n{diameter_message}"
                           f"\n{close_approach_message}"
                           f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
    if len(message) == 0:
        # —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—É—Å—Ç–µ —Ç–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        message = "Great news, no ‚òÑ found, feel yourself safe."
    else:
        # —ñ–Ω–∞–∫—à–µ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑'—è–≤–ª—è—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç –∑ –∑–∞–≥—Ä–æ–∑–æ—é
        message = ("Bad news, some potentially hazardous ‚òÑ found. "
                   "Don`t forget to take ‚òî "
                   "with you when going outside)"
                   f"\n\n{message}")
    return message


async def get_inline_result():
    """ –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —è–∫—ñ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ –≤ —ñ–Ω–ª–∞–π–Ω –º–µ–Ω—é—é. """
    title, url = await NasaApi().get_picture_of_the_day()
    result = [
        InlineQueryResultPhoto(
            id="pic_of_the_day",
            title="Picture of the day",
            description='For specific day`s picture enter date in format [YYYY-MM-DD]',
            photo_url=url,
            photo_width=140,
            photo_height=70,
            caption=title,
            thumb_url="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/NASA_logo.svg/255px-NASA_logo.svg.png"
        ),
        InlineQueryResultArticle(
            id="Space_forecast_for_today",
            title="Space forecast for today",
            description='Get the asteroids precipitation forecastü§™',
            input_message_content=InputTextMessageContent(
                await get_message_for_forecast()),
            thumb_url="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/NASA_logo.svg/255px-NASA_logo.svg.png"
        ),
        InlineQueryResultArticle(
            id="Space_forecast_for_week",
            title="Space forecast for week",
            description='Get the asteroids precipitation forecastü§™',
            input_message_content=InputTextMessageContent(
                await get_message_for_forecast(for_week=True)),
            thumb_url="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/NASA_logo.svg/255px-NASA_logo.svg.png"
        )
    ]
    return result


async def inline_respose(query: InlineQuery):
    """ –§–æ—Ä–º—É—î–º–æ —ñ–Ω–ª–∞–π–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥—å. """
    print(query)
    result = await get_inline_result()
    await query.answer(result,
                       cache_time=1,
                       is_personal=True)


async def message_info(message: Message):
    """ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞. """
    print(message)
    await message.answer("–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–≥ –±–æ—Ç–∞. –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ —ñ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ ;)")